[
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "Patient",
        "importPath": "api.models.patient",
        "description": "api.models.patient",
        "isExtraImport": true,
        "detail": "api.models.patient",
        "documentation": {}
    },
    {
        "label": "Patient",
        "importPath": "api.models.patient",
        "description": "api.models.patient",
        "isExtraImport": true,
        "detail": "api.models.patient",
        "documentation": {}
    },
    {
        "label": "Patient",
        "importPath": "api.models.patient",
        "description": "api.models.patient",
        "isExtraImport": true,
        "detail": "api.models.patient",
        "documentation": {}
    },
    {
        "label": "Patient",
        "importPath": "api.models.patient",
        "description": "api.models.patient",
        "isExtraImport": true,
        "detail": "api.models.patient",
        "documentation": {}
    },
    {
        "label": "Patient",
        "importPath": "api.models.patient",
        "description": "api.models.patient",
        "isExtraImport": true,
        "detail": "api.models.patient",
        "documentation": {}
    },
    {
        "label": "Patient",
        "importPath": "api.models.patient",
        "description": "api.models.patient",
        "isExtraImport": true,
        "detail": "api.models.patient",
        "documentation": {}
    },
    {
        "label": "Patient",
        "importPath": "api.models.patient",
        "description": "api.models.patient",
        "isExtraImport": true,
        "detail": "api.models.patient",
        "documentation": {}
    },
    {
        "label": "Dermatologist",
        "importPath": "api.models.dermatologist",
        "description": "api.models.dermatologist",
        "isExtraImport": true,
        "detail": "api.models.dermatologist",
        "documentation": {}
    },
    {
        "label": "Dermatologist",
        "importPath": "api.models.dermatologist",
        "description": "api.models.dermatologist",
        "isExtraImport": true,
        "detail": "api.models.dermatologist",
        "documentation": {}
    },
    {
        "label": "Dermatologist",
        "importPath": "api.models.dermatologist",
        "description": "api.models.dermatologist",
        "isExtraImport": true,
        "detail": "api.models.dermatologist",
        "documentation": {}
    },
    {
        "label": "Dermatologist",
        "importPath": "api.models.dermatologist",
        "description": "api.models.dermatologist",
        "isExtraImport": true,
        "detail": "api.models.dermatologist",
        "documentation": {}
    },
    {
        "label": "Dermatologist",
        "importPath": "api.models.dermatologist",
        "description": "api.models.dermatologist",
        "isExtraImport": true,
        "detail": "api.models.dermatologist",
        "documentation": {}
    },
    {
        "label": "Appointment",
        "importPath": "api.models.appointment",
        "description": "api.models.appointment",
        "isExtraImport": true,
        "detail": "api.models.appointment",
        "documentation": {}
    },
    {
        "label": "Appointment",
        "importPath": "api.models.appointment",
        "description": "api.models.appointment",
        "isExtraImport": true,
        "detail": "api.models.appointment",
        "documentation": {}
    },
    {
        "label": "Appointment",
        "importPath": "api.models.appointment",
        "description": "api.models.appointment",
        "isExtraImport": true,
        "detail": "api.models.appointment",
        "documentation": {}
    },
    {
        "label": "Appointment",
        "importPath": "api.models.appointment",
        "description": "api.models.appointment",
        "isExtraImport": true,
        "detail": "api.models.appointment",
        "documentation": {}
    },
    {
        "label": "Appointment",
        "importPath": "api.models.appointment",
        "description": "api.models.appointment",
        "isExtraImport": true,
        "detail": "api.models.appointment",
        "documentation": {}
    },
    {
        "label": "Diagnosis",
        "importPath": "api.models.diagnosis",
        "description": "api.models.diagnosis",
        "isExtraImport": true,
        "detail": "api.models.diagnosis",
        "documentation": {}
    },
    {
        "label": "Diagnosis",
        "importPath": "api.models.diagnosis",
        "description": "api.models.diagnosis",
        "isExtraImport": true,
        "detail": "api.models.diagnosis",
        "documentation": {}
    },
    {
        "label": "Diagnosis",
        "importPath": "api.models.diagnosis",
        "description": "api.models.diagnosis",
        "isExtraImport": true,
        "detail": "api.models.diagnosis",
        "documentation": {}
    },
    {
        "label": "Diagnosis",
        "importPath": "api.models.diagnosis",
        "description": "api.models.diagnosis",
        "isExtraImport": true,
        "detail": "api.models.diagnosis",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {}
    },
    {
        "label": "AppointmentChat",
        "importPath": "api.models.appointment_chat",
        "description": "api.models.appointment_chat",
        "isExtraImport": true,
        "detail": "api.models.appointment_chat",
        "documentation": {}
    },
    {
        "label": "AppointmentChat",
        "importPath": "api.models.appointment_chat",
        "description": "api.models.appointment_chat",
        "isExtraImport": true,
        "detail": "api.models.appointment_chat",
        "documentation": {}
    },
    {
        "label": "AppointmentChat",
        "importPath": "api.models.appointment_chat",
        "description": "api.models.appointment_chat",
        "isExtraImport": true,
        "detail": "api.models.appointment_chat",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "rest_framework",
        "description": "rest_framework",
        "isExtraImport": true,
        "detail": "rest_framework",
        "documentation": {}
    },
    {
        "label": "DermatologistSerializer",
        "importPath": "api.serializers.dermatologist",
        "description": "api.serializers.dermatologist",
        "isExtraImport": true,
        "detail": "api.serializers.dermatologist",
        "documentation": {}
    },
    {
        "label": "DermatologistSerializer",
        "importPath": "api.serializers.dermatologist",
        "description": "api.serializers.dermatologist",
        "isExtraImport": true,
        "detail": "api.serializers.dermatologist",
        "documentation": {}
    },
    {
        "label": "DermatologistSerializer",
        "importPath": "api.serializers.dermatologist",
        "description": "api.serializers.dermatologist",
        "isExtraImport": true,
        "detail": "api.serializers.dermatologist",
        "documentation": {}
    },
    {
        "label": "DermatologistSerializer",
        "importPath": "api.serializers.dermatologist",
        "description": "api.serializers.dermatologist",
        "isExtraImport": true,
        "detail": "api.serializers.dermatologist",
        "documentation": {}
    },
    {
        "label": "PatientSerializer",
        "importPath": "api.serializers.patient",
        "description": "api.serializers.patient",
        "isExtraImport": true,
        "detail": "api.serializers.patient",
        "documentation": {}
    },
    {
        "label": "PatientSerializer",
        "importPath": "api.serializers.patient",
        "description": "api.serializers.patient",
        "isExtraImport": true,
        "detail": "api.serializers.patient",
        "documentation": {}
    },
    {
        "label": "PatientSerializer",
        "importPath": "api.serializers.patient",
        "description": "api.serializers.patient",
        "isExtraImport": true,
        "detail": "api.serializers.patient",
        "documentation": {}
    },
    {
        "label": "PatientSerializer",
        "importPath": "api.serializers.patient",
        "description": "api.serializers.patient",
        "isExtraImport": true,
        "detail": "api.serializers.patient",
        "documentation": {}
    },
    {
        "label": "AppointmentSerializer",
        "importPath": "api.serializers.appointment",
        "description": "api.serializers.appointment",
        "isExtraImport": true,
        "detail": "api.serializers.appointment",
        "documentation": {}
    },
    {
        "label": "AppointmentSerializer",
        "importPath": "api.serializers.appointment",
        "description": "api.serializers.appointment",
        "isExtraImport": true,
        "detail": "api.serializers.appointment",
        "documentation": {}
    },
    {
        "label": "AppointmentSerializer",
        "importPath": "api.serializers.appointment",
        "description": "api.serializers.appointment",
        "isExtraImport": true,
        "detail": "api.serializers.appointment",
        "documentation": {}
    },
    {
        "label": "ChatMessageSerializer",
        "importPath": "api.serializers.chat_message",
        "description": "api.serializers.chat_message",
        "isExtraImport": true,
        "detail": "api.serializers.chat_message",
        "documentation": {}
    },
    {
        "label": "ChatMessageSerializer",
        "importPath": "api.serializers.chat_message",
        "description": "api.serializers.chat_message",
        "isExtraImport": true,
        "detail": "api.serializers.chat_message",
        "documentation": {}
    },
    {
        "label": "DiagnosisSerializer",
        "importPath": "api.serializers.diagnosis",
        "description": "api.serializers.diagnosis",
        "isExtraImport": true,
        "detail": "api.serializers.diagnosis",
        "documentation": {}
    },
    {
        "label": "DiagnosisSerializer",
        "importPath": "api.serializers.diagnosis",
        "description": "api.serializers.diagnosis",
        "isExtraImport": true,
        "detail": "api.serializers.diagnosis",
        "documentation": {}
    },
    {
        "label": "DiagnosisSerializer",
        "importPath": "api.serializers.diagnosis",
        "description": "api.serializers.diagnosis",
        "isExtraImport": true,
        "detail": "api.serializers.diagnosis",
        "documentation": {}
    },
    {
        "label": "ChatMessage",
        "importPath": "api.models.chat_message",
        "description": "api.models.chat_message",
        "isExtraImport": true,
        "detail": "api.models.chat_message",
        "documentation": {}
    },
    {
        "label": "ChatMessage",
        "importPath": "api.models.chat_message",
        "description": "api.models.chat_message",
        "isExtraImport": true,
        "detail": "api.models.chat_message",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "importPath": "api.serializers.user",
        "description": "api.serializers.user",
        "isExtraImport": true,
        "detail": "api.serializers.user",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "importPath": "api.serializers.user",
        "description": "api.serializers.user",
        "isExtraImport": true,
        "detail": "api.serializers.user",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "importPath": "api.serializers.user",
        "description": "api.serializers.user",
        "isExtraImport": true,
        "detail": "api.serializers.user",
        "documentation": {}
    },
    {
        "label": "PredictionSerializer",
        "importPath": "api.serializers.prediction",
        "description": "api.serializers.prediction",
        "isExtraImport": true,
        "detail": "api.serializers.prediction",
        "documentation": {}
    },
    {
        "label": "Disease",
        "importPath": "api.models.disease",
        "description": "api.models.disease",
        "isExtraImport": true,
        "detail": "api.models.disease",
        "documentation": {}
    },
    {
        "label": "Disease",
        "importPath": "api.models.disease",
        "description": "api.models.disease",
        "isExtraImport": true,
        "detail": "api.models.disease",
        "documentation": {}
    },
    {
        "label": "Disease",
        "importPath": "api.models.disease",
        "description": "api.models.disease",
        "isExtraImport": true,
        "detail": "api.models.disease",
        "documentation": {}
    },
    {
        "label": "TreatmentSerializer",
        "importPath": "api.serializers.treatment",
        "description": "api.serializers.treatment",
        "isExtraImport": true,
        "detail": "api.serializers.treatment",
        "documentation": {}
    },
    {
        "label": "api.models.prediction",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "api.models.prediction",
        "description": "api.models.prediction",
        "detail": "api.models.prediction",
        "documentation": {}
    },
    {
        "label": "Prediction",
        "importPath": "api.models.prediction",
        "description": "api.models.prediction",
        "isExtraImport": true,
        "detail": "api.models.prediction",
        "documentation": {}
    },
    {
        "label": "Prediction",
        "importPath": "api.models.prediction",
        "description": "api.models.prediction",
        "isExtraImport": true,
        "detail": "api.models.prediction",
        "documentation": {}
    },
    {
        "label": "DiseaseSerializer",
        "importPath": "api.serializers.disease",
        "description": "api.serializers.disease",
        "isExtraImport": true,
        "detail": "api.serializers.disease",
        "documentation": {}
    },
    {
        "label": "DiseaseSerializer",
        "importPath": "api.serializers.disease",
        "description": "api.serializers.disease",
        "isExtraImport": true,
        "detail": "api.serializers.disease",
        "documentation": {}
    },
    {
        "label": "Treatment",
        "importPath": "api.models.treatment",
        "description": "api.models.treatment",
        "isExtraImport": true,
        "detail": "api.models.treatment",
        "documentation": {}
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {}
    },
    {
        "label": "tensorflow",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tensorflow",
        "description": "tensorflow",
        "detail": "tensorflow",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "detect_skin",
        "importPath": "api.skindisease.detect_skin",
        "description": "api.skindisease.detect_skin",
        "isExtraImport": true,
        "detail": "api.skindisease.detect_skin",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "Http404",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "JsonResponse",
        "importPath": "django.http",
        "description": "django.http",
        "isExtraImport": true,
        "detail": "django.http",
        "documentation": {}
    },
    {
        "label": "AppointmentChatSerializer",
        "importPath": "api.serializers.appointment_chat",
        "description": "api.serializers.appointment_chat",
        "isExtraImport": true,
        "detail": "api.serializers.appointment_chat",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "serializers",
        "importPath": "django.core",
        "description": "django.core",
        "isExtraImport": true,
        "detail": "django.core",
        "documentation": {}
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "IsAuthenticated",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "IsAdminUser",
        "importPath": "rest_framework.permissions",
        "description": "rest_framework.permissions",
        "isExtraImport": true,
        "detail": "rest_framework.permissions",
        "documentation": {}
    },
    {
        "label": "MultiPartParser",
        "importPath": "rest_framework.parsers",
        "description": "rest_framework.parsers",
        "isExtraImport": true,
        "detail": "rest_framework.parsers",
        "documentation": {}
    },
    {
        "label": "FormParser",
        "importPath": "rest_framework.parsers",
        "description": "rest_framework.parsers",
        "isExtraImport": true,
        "detail": "rest_framework.parsers",
        "documentation": {}
    },
    {
        "label": "detect_skin",
        "importPath": "api.skindisease",
        "description": "api.skindisease",
        "isExtraImport": true,
        "detail": "api.skindisease",
        "documentation": {}
    },
    {
        "label": "predict_disease",
        "importPath": "api.skindisease",
        "description": "api.skindisease",
        "isExtraImport": true,
        "detail": "api.skindisease",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "AppointmentView",
        "importPath": "api.views.appointment",
        "description": "api.views.appointment",
        "isExtraImport": true,
        "detail": "api.views.appointment",
        "documentation": {}
    },
    {
        "label": "AppointmentChatDetail",
        "importPath": "api.views.appointment_chat",
        "description": "api.views.appointment_chat",
        "isExtraImport": true,
        "detail": "api.views.appointment_chat",
        "documentation": {}
    },
    {
        "label": "AppointmentChatView",
        "importPath": "api.views.appointment_chat",
        "description": "api.views.appointment_chat",
        "isExtraImport": true,
        "detail": "api.views.appointment_chat",
        "documentation": {}
    },
    {
        "label": "ChatMessageView",
        "importPath": "api.views.chat_message",
        "description": "api.views.chat_message",
        "isExtraImport": true,
        "detail": "api.views.chat_message",
        "documentation": {}
    },
    {
        "label": "DermatologistDetail",
        "importPath": "api.views.dermatologist",
        "description": "api.views.dermatologist",
        "isExtraImport": true,
        "detail": "api.views.dermatologist",
        "documentation": {}
    },
    {
        "label": "DermatologistView",
        "importPath": "api.views.dermatologist",
        "description": "api.views.dermatologist",
        "isExtraImport": true,
        "detail": "api.views.dermatologist",
        "documentation": {}
    },
    {
        "label": "DiseaseDetail",
        "importPath": "api.views.disease",
        "description": "api.views.disease",
        "isExtraImport": true,
        "detail": "api.views.disease",
        "documentation": {}
    },
    {
        "label": "DiseaseView",
        "importPath": "api.views.disease",
        "description": "api.views.disease",
        "isExtraImport": true,
        "detail": "api.views.disease",
        "documentation": {}
    },
    {
        "label": "PatientDetail",
        "importPath": "api.views.patient",
        "description": "api.views.patient",
        "isExtraImport": true,
        "detail": "api.views.patient",
        "documentation": {}
    },
    {
        "label": "PatientView",
        "importPath": "api.views.patient",
        "description": "api.views.patient",
        "isExtraImport": true,
        "detail": "api.views.patient",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "ModelBackend",
        "importPath": "django.contrib.auth.backends",
        "description": "django.contrib.auth.backends",
        "isExtraImport": true,
        "detail": "django.contrib.auth.backends",
        "documentation": {}
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "views",
        "importPath": "rest_framework.authtoken",
        "description": "rest_framework.authtoken",
        "isExtraImport": true,
        "detail": "rest_framework.authtoken",
        "documentation": {}
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "api.migrations.0001_initial",
        "description": "api.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Appointment',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "api.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "api.migrations.0002_alter_appointmentchat_diagnosis",
        "description": "api.migrations.0002_alter_appointmentchat_diagnosis",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('api', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='appointmentchat',\n            name='diagnosis',\n            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.diagnosis'),\n        ),",
        "detail": "api.migrations.0002_alter_appointmentchat_diagnosis",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "api.migrations.0003_appointment_dermatologist_rejected_and_more",
        "description": "api.migrations.0003_appointment_dermatologist_rejected_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('api', '0002_alter_appointmentchat_diagnosis'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='appointment',\n            name='dermatologist_rejected',\n            field=models.DateTimeField(null=True),\n        ),",
        "detail": "api.migrations.0003_appointment_dermatologist_rejected_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "api.migrations.0004_remove_chatmessage_date_alter_chatmessage_time",
        "description": "api.migrations.0004_remove_chatmessage_date_alter_chatmessage_time",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('api', '0003_appointment_dermatologist_rejected_and_more'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='chatmessage',\n            name='date',\n        ),\n        migrations.AlterField(",
        "detail": "api.migrations.0004_remove_chatmessage_date_alter_chatmessage_time",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "api.migrations.0005_appointment_extra_info_alter_appointment_appo_date",
        "description": "api.migrations.0005_appointment_extra_info_alter_appointment_appo_date",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('api', '0004_remove_chatmessage_date_alter_chatmessage_time'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='appointment',\n            name='extra_info',\n            field=models.TextField(max_length=1000, null=True),\n        ),",
        "detail": "api.migrations.0005_appointment_extra_info_alter_appointment_appo_date",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "api.migrations.0006_alter_appointment_duration",
        "description": "api.migrations.0006_alter_appointment_duration",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('api', '0005_appointment_extra_info_alter_appointment_appo_date'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='appointment',\n            name='duration',\n            field=models.IntegerField(null=True),\n        ),",
        "detail": "api.migrations.0006_alter_appointment_duration",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "api.migrations.0007_rename_work_email_dermatologist_email_and_more",
        "description": "api.migrations.0007_rename_work_email_dermatologist_email_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('api', '0006_alter_appointment_duration'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='dermatologist',\n            old_name='work_email',\n            new_name='email',\n        ),",
        "detail": "api.migrations.0007_rename_work_email_dermatologist_email_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "api.migrations.0008_remove_treatment_gender_remove_treatment_max_age_and_more",
        "description": "api.migrations.0008_remove_treatment_gender_remove_treatment_max_age_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('api', '0007_rename_work_email_dermatologist_email_and_more'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='treatment',\n            name='gender',\n        ),\n        migrations.RemoveField(",
        "detail": "api.migrations.0008_remove_treatment_gender_remove_treatment_max_age_and_more",
        "documentation": {}
    },
    {
        "label": "Appointment",
        "kind": 6,
        "importPath": "api.models.appointment",
        "description": "api.models.appointment",
        "peekOfCode": "class Appointment(models.Model):\n    dermatologist = models.ForeignKey(Dermatologist, on_delete=models.CASCADE)\n    patient = models.ForeignKey(Patient, on_delete=models.CASCADE)\n    book_date = models.DateField(null=True)\n    appo_date = models.DateTimeField(null=True)\n    done = models.BooleanField(default=False)\n    duration = models.IntegerField(null=True)\n    cost = models.FloatField(default=0.0)\n    extra_info = models.TextField(max_length=1000, null=True)\n    patient_approved = models.DateTimeField(null=True)",
        "detail": "api.models.appointment",
        "documentation": {}
    },
    {
        "label": "AppointmentChat",
        "kind": 6,
        "importPath": "api.models.appointment_chat",
        "description": "api.models.appointment_chat",
        "peekOfCode": "class AppointmentChat(models.Model):\n    patient = models.ForeignKey(Patient, on_delete=models.CASCADE)\n    diagnosis = models.ForeignKey(Diagnosis, on_delete=models.SET_NULL, null=True)\n    dermatologist = models.ForeignKey(Dermatologist, on_delete=models.CASCADE)\n    appointment = models.ForeignKey(Appointment, on_delete=models.CASCADE)",
        "detail": "api.models.appointment_chat",
        "documentation": {}
    },
    {
        "label": "ChatMessage",
        "kind": 6,
        "importPath": "api.models.chat_message",
        "description": "api.models.chat_message",
        "peekOfCode": "class ChatMessage(models.Model):\n    sender = models.ForeignKey(User, on_delete=models.CASCADE)\n    text = models.TextField(max_length=1000)\n    chat = models.ForeignKey(AppointmentChat, on_delete=models.CASCADE)\n    diagnosis = models.ForeignKey(Diagnosis, on_delete=models.SET_NULL, null=True)\n    appointment = models.ForeignKey(Appointment, on_delete=models.SET_NULL, null=True)\n    time = models.DateTimeField(auto_now_add=True)\n    seen = models.BooleanField(default=False)",
        "detail": "api.models.chat_message",
        "documentation": {}
    },
    {
        "label": "Dermatologist",
        "kind": 6,
        "importPath": "api.models.dermatologist",
        "description": "api.models.dermatologist",
        "peekOfCode": "class Dermatologist(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\n    qualification = models.CharField(max_length=100)\n    email = models.EmailField()\n    phone_number = models.CharField(max_length=13)\n    clinic = models.CharField(max_length=200)\n    location_lat = models.FloatField()\n    location_lon = models.FloatField()\n    location_desc = models.CharField(max_length=100)",
        "detail": "api.models.dermatologist",
        "documentation": {}
    },
    {
        "label": "Diagnosis",
        "kind": 6,
        "importPath": "api.models.diagnosis",
        "description": "api.models.diagnosis",
        "peekOfCode": "class Diagnosis(models.Model):\n    image = models.ImageField(upload_to='media/diagnosis/%Y/%m/%d/')\n    patient = models.ForeignKey(Patient, on_delete=models.CASCADE)\n    body_part = models.CharField(max_length=100)\n    itchy = models.BooleanField(default=False)\n    date = models.DateTimeField(auto_now_add=True)",
        "detail": "api.models.diagnosis",
        "documentation": {}
    },
    {
        "label": "Disease",
        "kind": 6,
        "importPath": "api.models.disease",
        "description": "api.models.disease",
        "peekOfCode": "class Disease(models.Model):\n    name = models.CharField(max_length=100)\n    description = models.TextField(max_length=500)\n    severity = models.IntegerField(choices=[(1, \"Mild\"), (2, \"Moderate\"), (3, \"Severe\")])",
        "detail": "api.models.disease",
        "documentation": {}
    },
    {
        "label": "Patient",
        "kind": 6,
        "importPath": "api.models.patient",
        "description": "api.models.patient",
        "peekOfCode": "class Patient(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE)\n    dob = models.DateTimeField()\n    gender = models.CharField(max_length=1, choices=[(\"M\", \"Male\"), (\"F\", \"Female\"), (\"O\", \"Other\")])",
        "detail": "api.models.patient",
        "documentation": {}
    },
    {
        "label": "Prediction",
        "kind": 6,
        "importPath": "api.models.prediction",
        "description": "api.models.prediction",
        "peekOfCode": "class Prediction(models.Model):\n    disease = models.ForeignKey('Disease', on_delete=models.CASCADE, null=True)\n    diagnosis = models.ForeignKey('Diagnosis', on_delete=models.CASCADE)\n    probability = models.FloatField(default=0.0)",
        "detail": "api.models.prediction",
        "documentation": {}
    },
    {
        "label": "Treatment",
        "kind": 6,
        "importPath": "api.models.treatment",
        "description": "api.models.treatment",
        "peekOfCode": "class Treatment(models.Model):\n    disease = models.ForeignKey('Disease', on_delete=models.CASCADE)\n    description = models.TextField(max_length=500)\n    title = models.CharField(max_length=100)",
        "detail": "api.models.treatment",
        "documentation": {}
    },
    {
        "label": "AppointmentSerializer",
        "kind": 6,
        "importPath": "api.serializers.appointment",
        "description": "api.serializers.appointment",
        "peekOfCode": "class AppointmentSerializer(serializers.ModelSerializer):\n    dermatologist = DermatologistSerializer(read_only=True)\n    patient = PatientSerializer(read_only=True)\n    class Meta:\n        model = Appointment\n        fields = ['id', 'dermatologist', 'patient', 'book_date', 'appo_date', 'done', 'extra_info', 'duration', 'cost', 'patient_approved', 'dermatologist_approved', 'patient_rejected', 'dermatologist_rejected']",
        "detail": "api.serializers.appointment",
        "documentation": {}
    },
    {
        "label": "AppointmentChatSerializer",
        "kind": 6,
        "importPath": "api.serializers.appointment_chat",
        "description": "api.serializers.appointment_chat",
        "peekOfCode": "class AppointmentChatSerializer(serializers.ModelSerializer):\n    patient = PatientSerializer()\n    diagnosis = DiagnosisSerializer()\n    dermatologist = DermatologistSerializer()\n    appointment = AppointmentSerializer()\n    messages = ChatMessageSerializer(many=True, read_only=True, source=\"chatmessage_set\")\n    class Meta:\n        model = AppointmentChat\n        fields = ['id', 'patient', 'diagnosis', 'dermatologist', 'appointment', 'messages']\n    def get_queryset(self):",
        "detail": "api.serializers.appointment_chat",
        "documentation": {}
    },
    {
        "label": "ChatMessageSerializer",
        "kind": 6,
        "importPath": "api.serializers.chat_message",
        "description": "api.serializers.chat_message",
        "peekOfCode": "class ChatMessageSerializer(serializers.ModelSerializer):\n    sender = UserSerializer(read_only=True)\n    diagnosis = DiagnosisSerializer(allow_null=True)\n    appointment = AppointmentSerializer(allow_null=True)\n    class Meta:\n        model = ChatMessage\n        fields = ['id', 'sender', 'text', 'chat_id', 'diagnosis', 'appointment', 'time', 'seen']",
        "detail": "api.serializers.chat_message",
        "documentation": {}
    },
    {
        "label": "DermatologistSerializer",
        "kind": 6,
        "importPath": "api.serializers.dermatologist",
        "description": "api.serializers.dermatologist",
        "peekOfCode": "class DermatologistSerializer(serializers.ModelSerializer):\n    user = UserSerializer(read_only=True)\n    class Meta:\n        model = Dermatologist\n        fields = ['id', 'qualification', 'email', 'phone_number', 'clinic', 'location_lat', 'location_lon', 'location_desc', 'user']\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        return queryset.select_related('user')",
        "detail": "api.serializers.dermatologist",
        "documentation": {}
    },
    {
        "label": "DiagnosisSerializer",
        "kind": 6,
        "importPath": "api.serializers.diagnosis",
        "description": "api.serializers.diagnosis",
        "peekOfCode": "class DiagnosisSerializer(serializers.ModelSerializer):\n    predictions = PredictionSerializer(many=True, read_only=True, source='prediction_set')\n    date = serializers.DateTimeField(format=\"%Y-%m-%d %H:%M:%S\")\n    class Meta:\n        model = Diagnosis\n        fields = ('id', 'image', 'body_part', 'itchy', 'date', 'predictions')\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        return queryset.select_related('prediction_set')",
        "detail": "api.serializers.diagnosis",
        "documentation": {}
    },
    {
        "label": "DiseaseSerializer",
        "kind": 6,
        "importPath": "api.serializers.disease",
        "description": "api.serializers.disease",
        "peekOfCode": "class DiseaseSerializer(serializers.ModelSerializer):\n    treatments = TreatmentSerializer(many=True, read_only=True, source='treatment_set')\n    class Meta:\n        model = Disease\n        fields = ('id', 'name', 'description', 'severity', 'treatments')\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        return queryset.select_related('treatment_set')\n    def get_severity_display(self, obj):\n        return obj.get_severity_display()",
        "detail": "api.serializers.disease",
        "documentation": {}
    },
    {
        "label": "PatientSerializer",
        "kind": 6,
        "importPath": "api.serializers.patient",
        "description": "api.serializers.patient",
        "peekOfCode": "class PatientSerializer(serializers.ModelSerializer):\n    user = UserSerializer(read_only=True)\n    dob = serializers.DateTimeField(format=\"%Y-%m-%d %H:%M:%S\")\n    class Meta:\n        model = Patient\n        fields = ['id', 'dob', 'gender', 'user']\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        return queryset.select_related('user')\n    def get_gender_display(self, obj):",
        "detail": "api.serializers.patient",
        "documentation": {}
    },
    {
        "label": "PredictionSerializer",
        "kind": 6,
        "importPath": "api.serializers.prediction",
        "description": "api.serializers.prediction",
        "peekOfCode": "class PredictionSerializer(serializers.ModelSerializer):\n    disease = DiseaseSerializer()\n    class Meta:\n        model = Prediction\n        fields = ('disease', 'probability')\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        return queryset.select_related('disease')",
        "detail": "api.serializers.prediction",
        "documentation": {}
    },
    {
        "label": "TreatmentSerializer",
        "kind": 6,
        "importPath": "api.serializers.treatment",
        "description": "api.serializers.treatment",
        "peekOfCode": "class TreatmentSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Treatment\n        fields = ('title', 'description')",
        "detail": "api.serializers.treatment",
        "documentation": {}
    },
    {
        "label": "UserSerializer",
        "kind": 6,
        "importPath": "api.serializers.user",
        "description": "api.serializers.user",
        "peekOfCode": "class UserSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = User\n        fields = ('id', 'username', 'email', 'first_name', 'last_name', 'is_staff', 'is_active')",
        "detail": "api.serializers.user",
        "documentation": {}
    },
    {
        "label": "center_skin",
        "kind": 2,
        "importPath": "api.skindisease.detect_skin",
        "description": "api.skindisease.detect_skin",
        "peekOfCode": "def center_skin(skin, image):\n    # Find the bounding box of the skin region\n    contours, _ = cv2.findContours(skin, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n    # Find the contour with the largest area\n    largest_contour = None\n    largest_area = 0\n    for contour in contours:\n        area = cv2.contourArea(contour)\n        if area > largest_area:\n            largest_area = area",
        "detail": "api.skindisease.detect_skin",
        "documentation": {}
    },
    {
        "label": "detect_skin",
        "kind": 2,
        "importPath": "api.skindisease.detect_skin",
        "description": "api.skindisease.detect_skin",
        "peekOfCode": "def detect_skin(image):\n    # Load the image\n    # image = cv2.imread(\"D:/Xool/4/2/2/smartskin/media/media/diagnosis/2023/05/08/angioedema_of_lips.jpg\")\n    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)\n    # Convert the image to YCbCr color space\n    ycbcr = cv2.cvtColor(image, cv2.COLOR_BGR2YCrCb)\n    # Define range of skin color in YCbCr\n    # lower_skin = np.array([0, 135, 85], dtype=np.uint8)\n    # upper_skin = np.array([255, 180, 135], dtype=np.uint8)\n    # Define range of skin color in YCbCr",
        "detail": "api.skindisease.detect_skin",
        "documentation": {}
    },
    {
        "label": "get_model",
        "kind": 2,
        "importPath": "api.skindisease.identify",
        "description": "api.skindisease.identify",
        "peekOfCode": "def get_model(name):\n    tf.keras.backend.clear_session()\n    model = tf.keras.models.load_model(os.path.join(os.path.dirname(__file__), \"models\", name + \".h5\"), custom_objects=custom_objects)\n    for layer in model.layers:\n        if isinstance(layer, tf.keras.layers.Dropout):\n            layer.rate = 0.0\n        layer.training = False\n    return model\nmodels = {\n    # \"Itchy Face\": get_model(\"Itchy Face\"),",
        "detail": "api.skindisease.identify",
        "documentation": {}
    },
    {
        "label": "map_predictions",
        "kind": 2,
        "importPath": "api.skindisease.identify",
        "description": "api.skindisease.identify",
        "peekOfCode": "def map_predictions(diagnosis, predictions, labels):\n    disease_prob = [{\"disease\": disease, \"probability\": predictions[labels[disease]]} for disease in labels]\n    disease_prob.sort(key=lambda x: x[\"probability\"], reverse=True)\n    return [Prediction.objects.create(\n        disease=diseases.get(name=disease[\"disease\"]), \n        diagnosis=diagnosis, \n        probability=disease[\"probability\"]) \n            for disease in disease_prob[:3]]\ndef preprocess_image(img):\n    img = np.asarray(img.resize((299, 299)))",
        "detail": "api.skindisease.identify",
        "documentation": {}
    },
    {
        "label": "preprocess_image",
        "kind": 2,
        "importPath": "api.skindisease.identify",
        "description": "api.skindisease.identify",
        "peekOfCode": "def preprocess_image(img):\n    img = np.asarray(img.resize((299, 299)))\n    # has_skin, img = detect_skin(img)\n    # if not has_skin:\n    #     raise Exception(\"No skin detected\")\n    img = np.array(img) / 255.0\n    img = np.expand_dims(img, axis=0)\n    return img\n# Identifies the skin disease in the image\ndef predict_disease(diagnosis):",
        "detail": "api.skindisease.identify",
        "documentation": {}
    },
    {
        "label": "predict_disease",
        "kind": 2,
        "importPath": "api.skindisease.identify",
        "description": "api.skindisease.identify",
        "peekOfCode": "def predict_disease(diagnosis):\n    img = preprocess_image(Image.open(diagnosis.image))\n    model = models[(\"Itchy\" if diagnosis.itchy else \"Non Itchy\") + \" \" + diagnosis.body_part]\n    model_labels = labels[(\"Itchy\" if diagnosis.itchy else \"Non Itchy\") + \" \" + diagnosis.body_part]\n    predictions = map_predictions(diagnosis, model.predict(img)[0].tolist(), model_labels)\n    return predictions",
        "detail": "api.skindisease.identify",
        "documentation": {}
    },
    {
        "label": "custom_objects",
        "kind": 5,
        "importPath": "api.skindisease.identify",
        "description": "api.skindisease.identify",
        "peekOfCode": "custom_objects = {'BatchNormalization': tf.keras.layers.BatchNormalization, 'Adam': tf.keras.optimizers.Adam}\n# Returns the model for the given part and itchy\ndef get_model(name):\n    tf.keras.backend.clear_session()\n    model = tf.keras.models.load_model(os.path.join(os.path.dirname(__file__), \"models\", name + \".h5\"), custom_objects=custom_objects)\n    for layer in model.layers:\n        if isinstance(layer, tf.keras.layers.Dropout):\n            layer.rate = 0.0\n        layer.training = False\n    return model",
        "detail": "api.skindisease.identify",
        "documentation": {}
    },
    {
        "label": "models",
        "kind": 5,
        "importPath": "api.skindisease.identify",
        "description": "api.skindisease.identify",
        "peekOfCode": "models = {\n    # \"Itchy Face\": get_model(\"Itchy Face\"),\n    # \"Non Itchy Face\": get_model(\"Non Itchy Face\"),\n    # \"Itchy Cranium\": get_model(\"Itchy Cranium\"),\n    # \"Itchy Arms Hands\": get_model(\"Itchy Arms Hands\"),\n    # \"Itchy Upper Body\": get_model(\"Itchy Arms Hands\"),\n}\nlabels = {\n    \"Itchy Face\": {'acne': 0, 'eczema': 1, 'rosacea': 2, 'seborrheic dermatitis': 3, 'urticaria': 4},\n    \"Non Itchy Face\": {'acne vulgaris': 0, 'basal cell carcinoma': 1, 'rosacea': 2, 'seborrheic dermatitis': 3, 'squamous cell carcinoma': 4},",
        "detail": "api.skindisease.identify",
        "documentation": {}
    },
    {
        "label": "labels",
        "kind": 5,
        "importPath": "api.skindisease.identify",
        "description": "api.skindisease.identify",
        "peekOfCode": "labels = {\n    \"Itchy Face\": {'acne': 0, 'eczema': 1, 'rosacea': 2, 'seborrheic dermatitis': 3, 'urticaria': 4},\n    \"Non Itchy Face\": {'acne vulgaris': 0, 'basal cell carcinoma': 1, 'rosacea': 2, 'seborrheic dermatitis': 3, 'squamous cell carcinoma': 4},\n    \"Itchy Cranium\": {'eczema': 0, 'folliculitis': 1, 'lichen planus': 2, 'psoriasis': 3, 'rosacea': 4, 'seborrheic dermatitis': 5},\n    \"Itchy Upper Body\": {'eczema': 0, 'folliculitis': 1, 'lichen planus': 2, 'psoriasis': 3, 'rosacea': 4, 'seborrheic dermatitis': 5},\n    \"Itchy Arms Hands\": {'allergic contact dermatitis': 0, 'dyshidrotic eczema': 1, 'lichen planus': 2, 'psoriasis': 3, 'scabies': 4, 'urticaria': 5}\n}\ndiseases = Disease.objects.all()\ndef map_predictions(diagnosis, predictions, labels):\n    disease_prob = [{\"disease\": disease, \"probability\": predictions[labels[disease]]} for disease in labels]",
        "detail": "api.skindisease.identify",
        "documentation": {}
    },
    {
        "label": "diseases",
        "kind": 5,
        "importPath": "api.skindisease.identify",
        "description": "api.skindisease.identify",
        "peekOfCode": "diseases = Disease.objects.all()\ndef map_predictions(diagnosis, predictions, labels):\n    disease_prob = [{\"disease\": disease, \"probability\": predictions[labels[disease]]} for disease in labels]\n    disease_prob.sort(key=lambda x: x[\"probability\"], reverse=True)\n    return [Prediction.objects.create(\n        disease=diseases.get(name=disease[\"disease\"]), \n        diagnosis=diagnosis, \n        probability=disease[\"probability\"]) \n            for disease in disease_prob[:3]]\ndef preprocess_image(img):",
        "detail": "api.skindisease.identify",
        "documentation": {}
    },
    {
        "label": "AppointmentView",
        "kind": 6,
        "importPath": "api.views.appointment",
        "description": "api.views.appointment",
        "peekOfCode": "class AppointmentView(APIView):\n    def get(self, request):\n        appointments = Appointment.objects.exclude(\n            patient_approved=None).exclude(\n                dermatologist_approved=None).filter(\n            done= True if request.GET.get('done', False) == 'true' else False)\n        serializer = AppointmentSerializer(appointments, many=True)\n        return Response(serializer.data)\n    def post(self, request):\n        serializer = AppointmentSerializer(data=request.data)",
        "detail": "api.views.appointment",
        "documentation": {}
    },
    {
        "label": "AppointmentChatView",
        "kind": 6,
        "importPath": "api.views.appointment_chat",
        "description": "api.views.appointment_chat",
        "peekOfCode": "class AppointmentChatView(APIView):\n    def get(self, request):\n        print(request.user)\n        is_patient = Patient.objects.all().filter(user=request.user).count() > 0\n        appointment_chats = AppointmentChat.objects.all().filter(patient_id=request.user.patient.id) if is_patient else AppointmentChat.objects.all().filter(dermatologist_id=request.user.dermatologist.id) \n        print(request.user, is_patient, appointment_chats) \n        serializer = AppointmentChatSerializer(appointment_chats, many=True)\n        return Response(serializer.data)\n    def post(self, request):\n        try:",
        "detail": "api.views.appointment_chat",
        "documentation": {}
    },
    {
        "label": "AppointmentChatDetail",
        "kind": 6,
        "importPath": "api.views.appointment_chat",
        "description": "api.views.appointment_chat",
        "peekOfCode": "class AppointmentChatDetail(APIView):\n    def get_object(self, pk):\n        try:\n            return AppointmentChat.objects.get(pk=pk)\n        except AppointmentChat.DoesNotExist:\n            raise Http404\n    def get(self, request, pk):\n        appointment_chat = self.get_object(pk)\n        serializer = AppointmentChatSerializer(appointment_chat)\n        return Response(serializer.data)",
        "detail": "api.views.appointment_chat",
        "documentation": {}
    },
    {
        "label": "ChatMessageView",
        "kind": 6,
        "importPath": "api.views.chat_message",
        "description": "api.views.chat_message",
        "peekOfCode": "class ChatMessageView(APIView):\n    def get_object(self, pk):\n        try:\n            return ChatMessage.objects.get(pk=pk)\n        except ChatMessage.DoesNotExist:\n            raise Http404\n    def get(self, request, pk):\n        chat_message = self.get_object(pk)\n        serializer = ChatMessageSerializer(chat_message)\n        return Response(serializer.data)",
        "detail": "api.views.chat_message",
        "documentation": {}
    },
    {
        "label": "DermatologistView",
        "kind": 6,
        "importPath": "api.views.dermatologist",
        "description": "api.views.dermatologist",
        "peekOfCode": "class DermatologistView(APIView):\n    permission_classes = []\n    def get(self, request):\n        dermatologists = Dermatologist.objects.all()\n        serializer = DermatologistSerializer(dermatologists, many=True)\n        return Response(serializer.data)\n    def post(self, request):\n        data = json.loads(request.body)\n        qualification = data.pop('qualification')\n        email = data.pop('email')",
        "detail": "api.views.dermatologist",
        "documentation": {}
    },
    {
        "label": "DermatologistDetail",
        "kind": 6,
        "importPath": "api.views.dermatologist",
        "description": "api.views.dermatologist",
        "peekOfCode": "class DermatologistDetail(APIView):\n    def get_object(self, username):\n        try:\n            user = User.objects.get(username=username)\n            return Dermatologist.objects.get(user=user)\n        except Dermatologist.DoesNotExist:\n            raise Http404\n    def get(self, request, username):\n        dermatologist = self.get_object(username)\n        serializer = DermatologistSerializer(dermatologist)",
        "detail": "api.views.dermatologist",
        "documentation": {}
    },
    {
        "label": "DiagnosisView",
        "kind": 6,
        "importPath": "api.views.diagnosis",
        "description": "api.views.diagnosis",
        "peekOfCode": "class DiagnosisView(APIView):\n    \"\"\"\n    API View to create or get a list of all the diagnoses of\n    users. GET request returns the user's diagnoses whereas\n    a POST request allows to create a new diagnosis.\n    \"\"\"\n    parser_classes = [MultiPartParser, FormParser]\n    #permission_classes = [IsAuthenticated]\n    def get(self, request, format=None):\n        if not request.user == None and request.user.is_staff:",
        "detail": "api.views.diagnosis",
        "documentation": {}
    },
    {
        "label": "DiseaseView",
        "kind": 6,
        "importPath": "api.views.disease",
        "description": "api.views.disease",
        "peekOfCode": "class DiseaseView(APIView):\n    def get(self, request):\n        diseases = Disease.objects.all()\n        serializer = DiseaseSerializer(diseases, many=True)\n        return Response(serializer.data)\n    def post(self, request):\n        serializer = DiseaseSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)",
        "detail": "api.views.disease",
        "documentation": {}
    },
    {
        "label": "DiseaseDetail",
        "kind": 6,
        "importPath": "api.views.disease",
        "description": "api.views.disease",
        "peekOfCode": "class DiseaseDetail(APIView):\n    def get_object(self, pk):\n        try:\n            return Disease.objects.get(pk=pk)\n        except Disease.DoesNotExist:\n            raise Http404\n    def get(self, request, pk):\n        disease = self.get_object(pk)\n        serializer = DiseaseSerializer(disease)\n        return Response(serializer.data)",
        "detail": "api.views.disease",
        "documentation": {}
    },
    {
        "label": "PatientView",
        "kind": 6,
        "importPath": "api.views.patient",
        "description": "api.views.patient",
        "peekOfCode": "class PatientView(APIView):\n    def get(self, request):\n        patients = Patient.objects.all()\n        serializer = PatientSerializer(patients, many=True)\n        return Response(serializer.data)\n    def post(self, request):\n        serializer = PatientSerializer(data=request.data)\n        if serializer.is_valid():\n            serializer.save()\n            return Response(serializer.data, status=status.HTTP_201_CREATED)",
        "detail": "api.views.patient",
        "documentation": {}
    },
    {
        "label": "PatientDetail",
        "kind": 6,
        "importPath": "api.views.patient",
        "description": "api.views.patient",
        "peekOfCode": "class PatientDetail(APIView):\n    def get_object(self, username):\n        try:\n            user = User.objects.get(username=username)\n            return Patient.objects.get(user=user)\n        except Patient.DoesNotExist:\n            raise Http404\n    def get(self, request, username):\n        patient = self.get_object(username)\n        serializer = PatientSerializer(patient)",
        "detail": "api.views.patient",
        "documentation": {}
    },
    {
        "label": "UserRecordView",
        "kind": 6,
        "importPath": "api.views.user_record",
        "description": "api.views.user_record",
        "peekOfCode": "class UserRecordView(APIView):\n    \"\"\"\n    API View to create or get a list of all the registered\n    users. GET request returns the registered users whereas\n    a POST request allows to create a new user.\n    \"\"\"\n    permission_classes = []\n    def get(self, format=None):\n        users = User.objects.all()\n        return JsonResponse(serializers.serialize(\"json\", users), safe=False)",
        "detail": "api.views.user_record",
        "documentation": {}
    },
    {
        "label": "ApiConfig",
        "kind": 6,
        "importPath": "api.apps",
        "description": "api.apps",
        "peekOfCode": "class ApiConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'api'",
        "detail": "api.apps",
        "documentation": {}
    },
    {
        "label": "app_name",
        "kind": 5,
        "importPath": "api.urls",
        "description": "api.urls",
        "peekOfCode": "app_name = 'api'\nurlpatterns = [\n    path('user/', UserRecordView.as_view(), name='users'),\n    path('users/register/', UserRecordView.as_view(), name='register'),\n    path('users/dermatologist/register/', DermatologistView.as_view(), name='derm.register'),\n    path('diagnosis/', DiagnosisView.as_view(), name='diagnosis'),\n    path('diagnosis/<int:pk>', DiagnosisView.as_view(), name='diagnosis.delete'),\n    path('dermatologists/nearby', DermatologistView.as_view(), name='dermatologist'),\n    path(\"dermatologists/<username>/\", DermatologistDetail.as_view(), name=\"dermatologist_detail\"),\n    path('diseases/', DiseaseView.as_view(), name='diseases'),   ",
        "detail": "api.urls",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "api.urls",
        "description": "api.urls",
        "peekOfCode": "urlpatterns = [\n    path('user/', UserRecordView.as_view(), name='users'),\n    path('users/register/', UserRecordView.as_view(), name='register'),\n    path('users/dermatologist/register/', DermatologistView.as_view(), name='derm.register'),\n    path('diagnosis/', DiagnosisView.as_view(), name='diagnosis'),\n    path('diagnosis/<int:pk>', DiagnosisView.as_view(), name='diagnosis.delete'),\n    path('dermatologists/nearby', DermatologistView.as_view(), name='dermatologist'),\n    path(\"dermatologists/<username>/\", DermatologistDetail.as_view(), name=\"dermatologist_detail\"),\n    path('diseases/', DiseaseView.as_view(), name='diseases'),   \n    path(\"diseases/<int:pk>/\", DiseaseDetail.as_view(), name=\"disease_detail\"),",
        "detail": "api.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "smartskin.asgi",
        "description": "smartskin.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "smartskin.asgi",
        "documentation": {}
    },
    {
        "label": "EmailBackend",
        "kind": 6,
        "importPath": "smartskin.backends",
        "description": "smartskin.backends",
        "peekOfCode": "class EmailBackend(ModelBackend):\n    def authenticate(self, request, email=None, password=None, **kwargs):\n        UserModel = get_user_model()\n        try:\n            user = UserModel.objects.get(email=email)\n        except UserModel.DoesNotExist:\n            return None\n        else:\n            if user.check_password(password):\n                return user",
        "detail": "smartskin.backends",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "smartskin.settings",
        "description": "smartskin.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\nMEDIA_ROOT = BASE_DIR / 'media'\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-@2^%3r(s4#y#q8ac9a0(fdk&s@u)()tid#$dzez7v$(+x-b5@9'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition",
        "detail": "smartskin.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "smartskin.settings",
        "description": "smartskin.settings",
        "peekOfCode": "MEDIA_ROOT = BASE_DIR / 'media'\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-@2^%3r(s4#y#q8ac9a0(fdk&s@u)()tid#$dzez7v$(+x-b5@9'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [",
        "detail": "smartskin.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "smartskin.settings",
        "description": "smartskin.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-@2^%3r(s4#y#q8ac9a0(fdk&s@u)()tid#$dzez7v$(+x-b5@9'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "smartskin.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "smartskin.settings",
        "description": "smartskin.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "smartskin.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "smartskin.settings",
        "description": "smartskin.settings",
        "peekOfCode": "ALLOWED_HOSTS = ['*']\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',",
        "detail": "smartskin.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "smartskin.settings",
        "description": "smartskin.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'rest_framework',\n    'rest_framework.authtoken',\n    'api.apps.ApiConfig',",
        "detail": "smartskin.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "smartskin.settings",
        "description": "smartskin.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\nROOT_URLCONF = 'smartskin.urls'",
        "detail": "smartskin.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "smartskin.settings",
        "description": "smartskin.settings",
        "peekOfCode": "ROOT_URLCONF = 'smartskin.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "smartskin.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "smartskin.settings",
        "description": "smartskin.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "smartskin.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "smartskin.settings",
        "description": "smartskin.settings",
        "peekOfCode": "WSGI_APPLICATION = 'smartskin.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# DATABASES = {",
        "detail": "smartskin.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "smartskin.settings",
        "description": "smartskin.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# DATABASES = {\n#     'default': {\n#         'ENGINE': 'django.db.backends.mysql',\n#         'NAME': 'smartskin',",
        "detail": "smartskin.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "smartskin.settings",
        "description": "smartskin.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "smartskin.settings",
        "documentation": {}
    },
    {
        "label": "REST_FRAMEWORK",
        "kind": 5,
        "importPath": "smartskin.settings",
        "description": "smartskin.settings",
        "peekOfCode": "REST_FRAMEWORK = {\n    'DEFAULT_AUTHENTICATION_CLASSES': (\n        'rest_framework.authentication.TokenAuthentication',\n    ),\n    'DEFAULT_PERMISSION_CLASSES': [\n        'rest_framework.permissions.IsAuthenticated',\n    ],\n}\nAUTHENTICATION_BACKENDS = [\n    'smartskin.backends.EmailBackend',",
        "detail": "smartskin.settings",
        "documentation": {}
    },
    {
        "label": "AUTHENTICATION_BACKENDS",
        "kind": 5,
        "importPath": "smartskin.settings",
        "description": "smartskin.settings",
        "peekOfCode": "AUTHENTICATION_BACKENDS = [\n    'smartskin.backends.EmailBackend',\n    'django.contrib.auth.backends.ModelBackend',\n]\n# Internationalization\n# https://docs.djangoproject.com/en/4.2/topics/i18n/\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True",
        "detail": "smartskin.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "smartskin.settings",
        "description": "smartskin.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nMEDIA_URL = '/media/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field",
        "detail": "smartskin.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "smartskin.settings",
        "description": "smartskin.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nMEDIA_URL = '/media/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "smartskin.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "smartskin.settings",
        "description": "smartskin.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nMEDIA_URL = '/media/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "smartskin.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "smartskin.settings",
        "description": "smartskin.settings",
        "peekOfCode": "USE_TZ = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\nMEDIA_URL = '/media/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "smartskin.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "smartskin.settings",
        "description": "smartskin.settings",
        "peekOfCode": "STATIC_URL = 'static/'\nMEDIA_URL = '/media/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "smartskin.settings",
        "documentation": {}
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "smartskin.settings",
        "description": "smartskin.settings",
        "peekOfCode": "MEDIA_URL = '/media/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "smartskin.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "smartskin.settings",
        "description": "smartskin.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "smartskin.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "smartskin.urls",
        "description": "smartskin.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include('api.urls', namespace='api')),\n    path('api/api-token-auth/', views.obtain_auth_token, name='api-token-auth'),\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)",
        "detail": "smartskin.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "smartskin.wsgi",
        "description": "smartskin.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "smartskin.wsgi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'smartskin.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    }
]